#include "TEST_IntensityTransforms.hpp"

string getFilename(string path) {
	// Find right-most / or \\ character
	size_t found = path.rfind("/");
	if (found == string::npos) {
		found = path.rfind("\\");
	}

	// Didn't find anything; start at beginning
	if (found == string::npos) {
		found = 0;
	}

	size_t newLen = path.length() - found;
	string filename = path.substr(found, newLen);

	return filename;
}

void printHistogram(double hist[], int length) {
	cout << "{ ";
	if (length > 0) {
		for (int i = 0; i < length - 1; i++) {
			cout << hist[i] << ", ";
		}
		cout << hist[length - 1];
	}
	cout << " }" << endl;
}

bool isEquals(double hist1[], double hist2[], int length) {
	for (int i = 0; i < length; i++) {
		if (fabs(hist1[i] - hist2[i]) >= EPSILON) {
			return false;
		}
	}
	return true;
}

bool TEST_ONE_calculateHistogram(int testIndex, Mat image, int histLen, double groundHist[]) {
	bool testPassed = true;
	double *hist = new double[histLen];
	calculateHistogram(image, hist, histLen);	
	if (!isEquals(hist, groundHist, histLen)) {
		cout << "\t" << "TEST " << testIndex << ": FAILED" << endl;
		cout << "\t" << "Ground truth: ";
		printHistogram(groundHist, histLen);
		cout << "\t" << "Calculated: ";
		printHistogram(hist, histLen);
		testPassed = false;
	}
	delete[] hist;
	return testPassed;
}

bool TEST_calculateHistogram(string filepath) {

	bool allPassed = true;

	// TEST 1 //////////////////////////////////////////
	double ground1[] = { 0.333333, 0.5, 0.166667 };
	allPassed &= TEST_ONE_calculateHistogram(1, (Mat_<uchar>(2, 3) << 0, 1, 1, 0, 2, 1), 3, ground1);

	// TEST 2 //////////////////////////////////////////
	double ground2[] = { 1, 0, 0, 0 };
	allPassed &= TEST_ONE_calculateHistogram(2, (Mat_<uchar>(7, 1) << 0,0,0,0,0,0,0), 4, ground2);

	// TEST 3 //////////////////////////////////////////
	Mat image = imread(filepath, IMREAD_GRAYSCALE);
	Mat histMat;
	int histSize = 256;
	float range[] = { 0, 256 }; 		
	const float* histRange = { range };
	bool uniform = true; 		
	bool accumulate = false; 		
	calcHist(&image, 1, 0, Mat(), histMat, 1, &histSize, &histRange, uniform, accumulate);
	double ground3[256];
	double pixelCnt = image.rows*image.cols;
	for (int i = 0; i < 256; i++) {
		ground3[i] = histMat.at<float>(i)/pixelCnt;
	}	
	allPassed &= TEST_ONE_calculateHistogram(3, image, 256, ground3);
			
	return allPassed;
}

bool TEST_ONE_calculateCumulative(int testIndex, double hist[], int histLen, double groundCDF[]) {
	bool testPassed = true;
	double *cdfHist = new double[histLen];
	calculateCumulative(hist, cdfHist, histLen);
	if (!isEquals(cdfHist, groundCDF, histLen)) {
		cout << "\t" << "TEST " << testIndex << ": FAILED" << endl;
		cout << "\t" << "Ground truth: ";
		printHistogram(groundCDF, histLen);
		cout << "\t" << "Calculated: ";
		printHistogram(cdfHist, histLen);
		testPassed = false;
	}
	delete[] cdfHist;
	return testPassed;
}

bool TEST_calculateCumulative() {
	bool allPassed = true;

	// TEST 1 //////////////////////////////////////////
	double hist1[] = { 0.333333, 0.5, 0.166667 };
	double ground1[] = { 0.333333, 0.833333, 1 };
	allPassed &= TEST_ONE_calculateCumulative(1, hist1, 3, ground1);

	// TEST 2 //////////////////////////////////////////
	double hist2[] = { 1, 0, 0, 0 };
	double ground2[] = { 1, 1, 1, 1 };
	allPassed &= TEST_ONE_calculateCumulative(2, hist2, 4, ground2);

	// TEST 3 //////////////////////////////////////////
	double hist3[] = { 0.00197407, 0.00143333, 0.00256667, 0.00437407, 0.00677407, 0, 0.00788148, 0, 0.00813704, 0, 0, 0.00822963, 0, 0.00813704, 0, 0.00831481, 0, 0.00929259, 0, 0.00882593, 0, 0.00812963, 0, 0.00754074, 0, 0.00774444, 0, 0.00717407, 0, 0.00694444, 0, 0.00678519, 0.00641111, 0, 0.00608519, 0.00622222, 0, 0.00568148, 0.00598889, 0, 0.0059, 0.00585926, 0, 0.00606296, 0, 0.00642963, 0.00645926, 0, 0.00642593, 0.00625556, 0, 0.00627407, 0, 0.00674444, 0, 0.00675185, 0.00714444, 0, 0.00715556, 0, 0.0069963, 0, 0.0073, 0, 0.00726667, 0, 0.00735185, 0.00754815, 0, 0.00778148, 0, 0.00772593, 0, 0.00794815, 0, 0.00795556, 0, 0, 0.00817407, 0, 0.00820741, 0, 0.00794074, 0, 0.0078037, 0, 0.00817778, 0, 0.00818889, 0, 0.00828519, 0, 0.00797778, 0, 0.00825926, 0, 0.00826667, 0, 0.00822963, 0, 0.00841111, 0, 0, 0.00835926, 0, 0.00811111, 0, 0.00827407, 0, 0.00791481, 0, 0.0082963, 0, 0.00801111, 0, 0.00834074, 0, 0.00822963, 0, 0.00823704, 0, 0.00812222, 0, 0.00794815, 0, 0.00816667, 0, 0.00787778, 0, 0.00784074, 0, 0.00775926, 0, 0.00747778, 0, 0.00754815, 0, 0.00777407, 0, 0.00721852, 0, 0.00701852, 0, 0.00705926, 0.00690741, 0, 0.00688519, 0, 0.00665926, 0, 0.00647407, 0.00675926, 0, 0.00642963, 0, 0.00636667, 0.00612222, 0, 0.00613704, 0.00601481, 0, 0.00595926, 0.00563333, 0, 0.0054037, 0.0055037, 0.00533704, 0, 0.00508519, 0.00465185, 0.00461111, 0.00469259, 0.00429259, 0.00433704, 0.00382593, 0.00364444, 0.00392963, 0.00358148, 0.0036, 0.00357037, 0.00328519, 0.00591111, 0.00277037, 0.00531111, 0.00251111, 0.00465185, 0.00454074, 0.00398519, 0.00420741, 0.00382963, 0.00403704, 0.00389259, 0.0038963, 0.00218519, 0.00443333, 0.00405926, 0.0036963, 0.00528889, 0.0034, 0.00310741, 0.00493333, 0.00294074, 0.00497407, 0.00307407, 0.00494815, 0.00328889, 0.00467037, 0.00321852, 0.00332222, 0.00484815, 0.00312963, 0.00496667, 0.00347778, 0.00400741, 0.00408148, 0.00384815, 0.00386296, 0.00405556, 0.00408148, 0.00214815, 0.00587407, 0.00359259, 0.00354815, 0.00323704, 0.0048963, 0.00435926, 0.00355926, 0.00328519, 0.00445926, 0.00338519, 0.00473333, 0.00345185, 0.00372593, 0.0039037, 0.00452963, 0.00307778, 0.0049037, 0.00383333, 0.00205185, 0.00478519, 0.00506667, 0.00276296, 0.00298519, 0.00322593, 0.00351111, 0.00363704, 0.00434815, 0.0045963, 0.00515185, 0, 0.00673333, 0, 0, 0.0108963, 0, 0.00910741 };
	double ground3[] = { 0.00197407, 0.0034074, 0.00597407, 0.0103481, 0.0171222, 0.0171222, 0.0250037, 0.0250037, 0.0331407, 0.0331407, 0.0331407, 0.0413704, 0.0413704, 0.0495074, 0.0495074, 0.0578222, 0.0578222, 0.0671148, 0.0671148, 0.0759407, 0.0759407, 0.0840704, 0.0840704, 0.0916111, 0.0916111, 0.0993555, 0.0993555, 0.10653, 0.10653, 0.113474, 0.113474, 0.120259, 0.12667, 0.12667, 0.132756, 0.138978, 0.138978, 0.144659, 0.150648, 0.150648, 0.156548, 0.162407, 0.162407, 0.16847, 0.16847, 0.1749, 0.181359, 0.181359, 0.187785, 0.194041, 0.194041, 0.200315, 0.200315, 0.207059, 0.207059, 0.213811, 0.220956, 0.220956, 0.228111, 0.228111, 0.235107, 0.235107, 0.242407, 0.242407, 0.249674, 0.249674, 0.257026, 0.264574, 0.264574, 0.272356, 0.272356, 0.280081, 0.280081, 0.28803, 0.28803, 0.295985, 0.295985, 0.295985, 0.304159, 0.304159, 0.312367, 0.312367, 0.320307, 0.320307, 0.328111, 0.328111, 0.336289, 0.336289, 0.344478, 0.344478, 0.352763, 0.352763, 0.360741, 0.360741, 0.369, 0.369, 0.377267, 0.377267, 0.385496, 0.385496, 0.393907, 0.393907, 0.393907, 0.402267, 0.402267, 0.410378, 0.410378, 0.418652, 0.418652, 0.426567, 0.426567, 0.434863, 0.434863, 0.442874, 0.442874, 0.451215, 0.451215, 0.459444, 0.459444, 0.467681, 0.467681, 0.475804, 0.475804, 0.483752, 0.483752, 0.491919, 0.491919, 0.499796, 0.499796, 0.507637, 0.507637, 0.515396, 0.515396, 0.522874, 0.522874, 0.530422, 0.530422, 0.538196, 0.538196, 0.545415, 0.545415, 0.552433, 0.552433, 0.559493, 0.5664, 0.5664, 0.573285, 0.573285, 0.579944, 0.579944, 0.586419, 0.593178, 0.593178, 0.599607, 0.599607, 0.605974, 0.612096, 0.612096, 0.618233, 0.624248, 0.624248, 0.630207, 0.635841, 0.635841, 0.641244, 0.646748, 0.652085, 0.652085, 0.65717, 0.661822, 0.666433, 0.671126, 0.675419, 0.679756, 0.683581, 0.687226, 0.691156, 0.694737, 0.698337, 0.701907, 0.705193, 0.711104, 0.713874, 0.719185, 0.721696, 0.726348, 0.730889, 0.734874, 0.739081, 0.742911, 0.746948, 0.750841, 0.754737, 0.756922, 0.761356, 0.765415, 0.769111, 0.7744, 0.7778, 0.780907, 0.785841, 0.788782, 0.793756, 0.79683, 0.801778, 0.805067, 0.809737, 0.812956, 0.816278, 0.821126, 0.824256, 0.829222, 0.8327, 0.836707, 0.840789, 0.844637, 0.8485, 0.852556, 0.856637, 0.858785, 0.864659, 0.868252, 0.8718, 0.875037, 0.879933, 0.884293, 0.887852, 0.891137, 0.895596, 0.898982, 0.903715, 0.907167, 0.910893, 0.914796, 0.919326, 0.922404, 0.927307, 0.931141, 0.933193, 0.937978, 0.943044, 0.945807, 0.948793, 0.952019, 0.95553, 0.959167, 0.963515, 0.968111, 0.973263, 0.973263, 0.979996, 0.979996, 0.979996, 0.990893, 0.990893, 1 };
	allPassed &= TEST_ONE_calculateCumulative(3, hist3, 256, ground3);

	return allPassed;
}

bool TEST_ONE_stretchCumulative(int testIndex, double cdfHist[], int histLen, double ground[]) {
	bool testPassed = true;
	double *stretchCFDHist = new double[histLen];
	stretchCumulative(cdfHist, stretchCFDHist, histLen);
	if (!isEquals(stretchCFDHist, ground, histLen)) {
		cout << "\t" << "TEST " << testIndex << ": FAILED" << endl;
		cout << "\t" << "Ground truth: ";
		printHistogram(ground, histLen);
		cout << "\t" << "Calculated: ";
		printHistogram(stretchCFDHist, histLen);
		testPassed = false;
	}
	delete[] stretchCFDHist;
	return testPassed;
}


bool TEST_stretchCumulative() {
	bool allPassed = true;

	// TEST 1 //////////////////////////////////////////
	double cdf1[] = { 0.333333, 0.833333, 1 };
	double ground1[] = { 0, 0.75, 1 };
	allPassed &= TEST_ONE_stretchCumulative(1, cdf1, 3, ground1);

	// TEST 2 //////////////////////////////////////////
	double cdf2[] = { 0.2, 0.3, 0.4, 0.5 };
	double ground2[] = { 0, 0.333333, 0.666667, 1 };
	allPassed &= TEST_ONE_stretchCumulative(2, cdf2, 4, ground2);

	// TEST 3 //////////////////////////////////////////
	double cdf3[] = { 0.00197407, 0.0034074, 0.00597407, 0.0103481, 0.0171222, 0.0171222, 0.0250037, 0.0250037, 0.0331407, 0.0331407, 0.0331407, 0.0413704, 0.0413704, 0.0495074, 0.0495074, 0.0578222, 0.0578222, 0.0671148, 0.0671148, 0.0759407, 0.0759407, 0.0840704, 0.0840704, 0.0916111, 0.0916111, 0.0993555, 0.0993555, 0.10653, 0.10653, 0.113474, 0.113474, 0.120259, 0.12667, 0.12667, 0.132756, 0.138978, 0.138978, 0.144659, 0.150648, 0.150648, 0.156548, 0.162407, 0.162407, 0.16847, 0.16847, 0.1749, 0.181359, 0.181359, 0.187785, 0.194041, 0.194041, 0.200315, 0.200315, 0.207059, 0.207059, 0.213811, 0.220956, 0.220956, 0.228111, 0.228111, 0.235107, 0.235107, 0.242407, 0.242407, 0.249674, 0.249674, 0.257026, 0.264574, 0.264574, 0.272356, 0.272356, 0.280081, 0.280081, 0.28803, 0.28803, 0.295985, 0.295985, 0.295985, 0.304159, 0.304159, 0.312367, 0.312367, 0.320307, 0.320307, 0.328111, 0.328111, 0.336289, 0.336289, 0.344478, 0.344478, 0.352763, 0.352763, 0.360741, 0.360741, 0.369, 0.369, 0.377267, 0.377267, 0.385496, 0.385496, 0.393907, 0.393907, 0.393907, 0.402267, 0.402267, 0.410378, 0.410378, 0.418652, 0.418652, 0.426567, 0.426567, 0.434863, 0.434863, 0.442874, 0.442874, 0.451215, 0.451215, 0.459444, 0.459444, 0.467681, 0.467681, 0.475804, 0.475804, 0.483752, 0.483752, 0.491919, 0.491919, 0.499796, 0.499796, 0.507637, 0.507637, 0.515396, 0.515396, 0.522874, 0.522874, 0.530422, 0.530422, 0.538196, 0.538196, 0.545415, 0.545415, 0.552433, 0.552433, 0.559493, 0.5664, 0.5664, 0.573285, 0.573285, 0.579944, 0.579944, 0.586419, 0.593178, 0.593178, 0.599607, 0.599607, 0.605974, 0.612096, 0.612096, 0.618233, 0.624248, 0.624248, 0.630207, 0.635841, 0.635841, 0.641244, 0.646748, 0.652085, 0.652085, 0.65717, 0.661822, 0.666433, 0.671126, 0.675419, 0.679756, 0.683581, 0.687226, 0.691156, 0.694737, 0.698337, 0.701907, 0.705193, 0.711104, 0.713874, 0.719185, 0.721696, 0.726348, 0.730889, 0.734874, 0.739081, 0.742911, 0.746948, 0.750841, 0.754737, 0.756922, 0.761356, 0.765415, 0.769111, 0.7744, 0.7778, 0.780907, 0.785841, 0.788782, 0.793756, 0.79683, 0.801778, 0.805067, 0.809737, 0.812956, 0.816278, 0.821126, 0.824256, 0.829222, 0.8327, 0.836707, 0.840789, 0.844637, 0.8485, 0.852556, 0.856637, 0.858785, 0.864659, 0.868252, 0.8718, 0.875037, 0.879933, 0.884293, 0.887852, 0.891137, 0.895596, 0.898982, 0.903715, 0.907167, 0.910893, 0.914796, 0.919326, 0.922404, 0.927307, 0.931141, 0.933193, 0.937978, 0.943044, 0.945807, 0.948793, 0.952019, 0.95553, 0.959167, 0.963515, 0.968111, 0.973263, 0.973263, 0.979996, 0.979996, 0.979996, 0.990893, 0.990893, 1 };
	double ground3[] = { 0, 0.00143617, 0.00400791, 0.00839059, 0.0151781, 0.0151781, 0.0230752, 0.0230752, 0.0312283, 0.0312283, 0.0312283, 0.0394743, 0.0394743, 0.0476273, 0.0476273, 0.0559586, 0.0559586, 0.0652696, 0.0652696, 0.0741129, 0.0741129, 0.0822587, 0.0822587, 0.0898143, 0.0898143, 0.097574, 0.097574, 0.104763, 0.104763, 0.11172, 0.11172, 0.118519, 0.124943, 0.124943, 0.131041, 0.137275, 0.137275, 0.142967, 0.148968, 0.148968, 0.15488, 0.16075, 0.16075, 0.166825, 0.166825, 0.173268, 0.17974, 0.17974, 0.186178, 0.192447, 0.192447, 0.198733, 0.198733, 0.205491, 0.205491, 0.212256, 0.219415, 0.219415, 0.226584, 0.226584, 0.233594, 0.233594, 0.240909, 0.240909, 0.24819, 0.24819, 0.255556, 0.263119, 0.263119, 0.270917, 0.270917, 0.278657, 0.278657, 0.286622, 0.286622, 0.294592, 0.294592, 0.294592, 0.302783, 0.302783, 0.311007, 0.311007, 0.318963, 0.318963, 0.326782, 0.326782, 0.334976, 0.334976, 0.343181, 0.343181, 0.351483, 0.351483, 0.359477, 0.359477, 0.367752, 0.367752, 0.376035, 0.376035, 0.384281, 0.384281, 0.392708, 0.392708, 0.392708, 0.401085, 0.401085, 0.409212, 0.409212, 0.417502, 0.417502, 0.425433, 0.425433, 0.433745, 0.433745, 0.441772, 0.441772, 0.45013, 0.45013, 0.458375, 0.458375, 0.466628, 0.466628, 0.474767, 0.474767, 0.482731, 0.482731, 0.490914, 0.490914, 0.498807, 0.498807, 0.506663, 0.506663, 0.514437, 0.514437, 0.52193, 0.52193, 0.529493, 0.529493, 0.537283, 0.537283, 0.544516, 0.544516, 0.551548, 0.551548, 0.558622, 0.565542, 0.565542, 0.572441, 0.572441, 0.579113, 0.579113, 0.585601, 0.592373, 0.592373, 0.598815, 0.598815, 0.605195, 0.611329, 0.611329, 0.617478, 0.623505, 0.623505, 0.629476, 0.635121, 0.635121, 0.640534, 0.646049, 0.651397, 0.651397, 0.656492, 0.661153, 0.665773, 0.670475, 0.674777, 0.679123, 0.682955, 0.686607, 0.690545, 0.694133, 0.69774, 0.701317, 0.70461, 0.710533, 0.713308, 0.71863, 0.721146, 0.725807, 0.730357, 0.73435, 0.738565, 0.742402, 0.746447, 0.750348, 0.754252, 0.756441, 0.760884, 0.764951, 0.768654, 0.773954, 0.77736, 0.780474, 0.785417, 0.788364, 0.793348, 0.796428, 0.801386, 0.804681, 0.809361, 0.812586, 0.815915, 0.820772, 0.823908, 0.828884, 0.832369, 0.836384, 0.840474, 0.84433, 0.8482, 0.852264, 0.856353, 0.858506, 0.864391, 0.867991, 0.871546, 0.87479, 0.879696, 0.884064, 0.88763, 0.890922, 0.895389, 0.898782, 0.903525, 0.906983, 0.910717, 0.914627, 0.919166, 0.922251, 0.927163, 0.931005, 0.933061, 0.937855, 0.942931, 0.9457, 0.948692, 0.951924, 0.955442, 0.959086, 0.963443, 0.968048, 0.97321, 0.97321, 0.979956, 0.979956, 0.979956, 0.990875, 0.990875, 1 };
	allPassed &= TEST_ONE_stretchCumulative(3, cdf3, 256, ground3);

	return allPassed;
}

bool TEST_getEqualizedImage(string filepath) {
	// Get filename
	string filename = getFilename(filepath);

	// Load image
	Mat image = imread(filepath, IMREAD_GRAYSCALE);

	// Check if data is invalid
	if (!image.data) {
		cout << "ERROR: Could not open or find the image!" << endl;
		return false;
	}

	// Compute ground truth equalized image using OpenCV	
	Mat groundImage;
	equalizeHist(image, groundImage);

	// Compute equalized image
	Mat equalImage;
	getEqualizedImage(image, equalImage);

	// Compare equalized image to ground truth
	// (Some code taken from: https://docs.opencv.org/2.4/doc/tutorials/highgui/video-input-psnr-ssim/video-input-psnr-ssim.html)
	Mat diffImage;
	absdiff(equalImage, groundImage, diffImage);
	Mat floatDiffImage;
	diffImage.convertTo(floatDiffImage, CV_32F);
	floatDiffImage = floatDiffImage.mul(floatDiffImage);
	Scalar diff = sum(floatDiffImage);

	cout << "\t" << "Total squared difference: " << diff[0] << endl;

	if (diff[0] > EPSILON) {
		cout << "\t" << "TEST FAILED!" << endl;
		//imshow("Differences", diffImage);
		//waitKey(-1);
		//destroyWindow("Differences");
		return false;
	}
	else {
		return true;
	}
}

